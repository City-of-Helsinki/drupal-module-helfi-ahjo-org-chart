<?php

/**
 * @file
 * Integrates Drupal with Ahjo API.
 */

/**
 * Implements hook_theme().
 */
function helfi_ahjo_theme($existing, $type, $theme, $path) {
  return [
    'hierarchical_taxonomy_tree' => [
      'builds' => [
        'menu_tree' => [],
        'route_tid' => NULL,
        'vocabulary' => NULL,
        'current_depth' => 0,
        'max_depth' => 0,
        'collapsible' => NULL,
      ],
    ],
    'paragraph__sote_section' => [
      'base hook' => 'paragraph',
      'template' => 'paragraph--sote-section',
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function helfi_ahjo_cron() {
  $config = \Drupal::configFactory()->get('helfi_ahjo.config');
  /** @var int $last_run */
  $last_run = \Drupal::state()->get('helfi_ahjo.last_run', 0);
  /** @var int $request_time */
  $request_time = \Drupal::time()->getRequestTime();
  $interval = $config->get('sync_interval') ?? 3600;

  // Check if we need to execute.
  if ($interval !== -1 && $last_run + $interval >= $request_time) {
    return;
  }

  $ahjsoService = \Drupal::service('helfi_ahjo.ahjo_service');
  try {
    $data = $ahjsoService->fetchDataFromRemote($config->get('org_id'), $config->get('max_depth'));
    $ahjsoService->createTaxonomyBatch($data);
  }
  catch (\Exception $e) {
    \Drupal::logger('helfi_ahjo')->error($e);
    return;
  }

  \Drupal::state()->set('helfi_ahjo.last_run', $request_time);
}

/**
 * Batch callback to dispatch operations to service.
 */
function _helfi_ahjo_batch_dispatcher() {
  $args = func_get_args();
  $exploded = explode(':', array_shift($args));
  $service = current($exploded);
  $method = end($exploded);
  // The second argument (context) is passed by reference.
  $values = $args[1];
  $args[1] = &$values;
  call_user_func_array([\Drupal::service($service), $method], $args);
}

/**
 * Implements hook_preprocess_hook().
 */
function helfi_ahjo_preprocess_paragraph(&$variables) {

  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  if ($paragraph_type == 'sote_section') {
    // @todo this library is only for demo purpose.
    $variables['#attached']['library'][] = 'helfi_ahjo/hierarchical_taxonomy_tree';
    $variables['vocabulary'] = 'sote_section';
    $variables['max_depth'] = $paragraph->get('field_max_depth')->value ?? 0;
    $variables['collapsible'] = 1;

    $excludeByTypeId = [];
    foreach ($paragraph->get('field_exclude_by_type_id') as $value) {
      $excludeByTypeId[] = $value->getString();
    }

    $menu_tree = \Drupal::service('helfi_ahjo.ahjo_service')
      ->getDataAsTree($excludeByTypeId, $paragraph->get('field_organization')->target_id,  $paragraph->get('field_max_depth')->value);
    $variables['menu_tree'] = $menu_tree;
    $variables['#cache']['tags'][] = 'taxonomy_term_list:sote_section';
  }
}
